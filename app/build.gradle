/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.14.2/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    id 'org.springframework.boot' version '3.5.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'java'
    id 'application'
}

// Add Spring AI BOM for version management - MUST come before dependencies
dependencyManagement {
    imports {
        mavenBom "org.springframework.ai:spring-ai-bom:1.0.0-M4"
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' } // Required for Spring AI milestones
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    // Spring Data JDBC
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'


    // SQLite JDBC Driver (ensure compatibility with your Spring Boot and Java version)
    implementation 'org.xerial:sqlite-jdbc:3.45.1.0' // Use a recent stable version
    implementation 'org.hibernate.orm:hibernate-community-dialects'



    // Flyway for Database Migrations (specify core and database-specific versions)
    implementation 'org.flywaydb:flyway-core:10.15.0' // Use the latest stable Flyway version
 // Match Flyway core version

    
    

    implementation 'org.springframework.ai:spring-ai-openai-spring-boot-starter'
    implementation 'org.apache.pdfbox:pdfbox:3.0.2'
    implementation 'io.milvus:milvus-sdk-java:2.6.0'


    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is used by the application.
    implementation libs.guava
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'com.javallm.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

task runPdfTest(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.javallm.test.PdfTextExtractorTest'
    args = project.hasProperty('pdfFile') ? [project.pdfFile] : []
    args += project.hasProperty('format') ? [project.format] : []
}